/*
 * Copyright 2016 Author or Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.cp.elements.lang.support;

import org.cp.elements.lang.Identifiable;
import org.cp.elements.lang.Visitable;
import org.cp.elements.lang.Visitor;

/**
 * The SetIdentityVisitor class is a Visitor implementation that assigns an identifier (ID) to an Identifiable object.
 * While identifiers generated by this Visitor are guaranteed to be sequential and unique, never repeating, it is
 * recommended that this Visitor class only be used for testing purposes and never in production.  The identifiers
 * generated by this Visitor are non-negative, long values and it is assumed that all Identifiable application
 * domain objects use longs as their ids.
 *
 * @author John J. Blum
 * @see org.cp.elements.lang.Identifiable
 * @see org.cp.elements.lang.Visitable
 * @see org.cp.elements.lang.Visitor
 * @since 1.0.0
 */
@SuppressWarnings("unused")
public class SetIdentityVisitor implements Visitor {

  private static long currentIdentifier = -1;

  /**
   * Generates a new identifier in the sequence, guaranteed to be unique.
   *
   * @return a long value representing the next identifier in sequence.
   * @see java.lang.System#nanoTime()
   */
  public synchronized static long getNextSequencedIdentifier() {
    long newIdentifier = System.nanoTime();

    while (newIdentifier == currentIdentifier) {
      newIdentifier = System.nanoTime();
    }

    currentIdentifier = newIdentifier;

    return newIdentifier;
  }

  /**
   * Visits any Visitable object implementing the Identifiable interface and assigns the Identifiable object
   * an identifier from the sequence.
   *
   * @param visitable the Visitable object visited by this Visitor.
   * @see #getNextSequencedIdentifier()
   * @see org.cp.elements.lang.Identifiable#setId(Comparable)
   * @see org.cp.elements.lang.Visitable
   */
  @Override
  @SuppressWarnings("unchecked")
  public void visit(final Visitable visitable) {
    if (visitable instanceof Identifiable) {
      ((Identifiable<Long>) visitable).setId(getNextSequencedIdentifier());
    }
  }

}
